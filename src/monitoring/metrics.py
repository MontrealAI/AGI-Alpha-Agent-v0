# SPDX-License-Identifier: Apache-2.0
"""Prometheus counters tracking the dynamic graph manager."""

from __future__ import annotations

import os
from typing import Any

try:
    from prometheus_client import Counter, Gauge  # type: ignore
except Exception:  # pragma: no cover - optional
    Counter = Gauge = None  # type: ignore

from alpha_factory_v1.backend.metrics_registry import get_metric

COST_PER_TOKEN = float(os.getenv("DGM_USD_PER_TOKEN", "0.0"))


if Counter is not None and Gauge is not None:
    dgm_tokens_total = get_metric(
        Counter,
        "dgm_tokens_total",
        "Total tokens processed by the DGM",
        ["provider"],
    )
    dgm_cost_usd_total = get_metric(
        Counter,
        "dgm_cost_usd_total",
        "Total USD cost incurred by the DGM",
        ["provider"],
    )
    dgm_children_total = get_metric(
        Counter,
        "dgm_children_total",
        "Total children generated by the DGM",
        [],
    )
    dgm_best_score = get_metric(
        Gauge,
        "dgm_best_score",
        "Best candidate score this generation",
        [],
    )
    dgm_archive_mean = get_metric(
        Gauge,
        "dgm_archive_mean",
        "Mean score of all candidates",
        [],
    )
    dgm_lineage_depth = get_metric(
        Gauge,
        "dgm_lineage_depth",
        "Lineage depth of the archive",
        [],
    )
else:  # pragma: no cover - prometheus not installed

    class _N:
        def labels(self, *_a: Any, **_kw: Any) -> "_N":
            return self

        def inc(self, *_a: Any, **_kw: Any) -> None: ...

        def set(self, *_a: Any, **_kw: Any) -> None: ...

    dgm_tokens_total = (
        dgm_cost_usd_total
    ) = (
        dgm_children_total
    ) = (
        dgm_best_score
    ) = (
        dgm_archive_mean
    ) = (
        dgm_lineage_depth
    ) = _N()
