# üåê Alpha-AGI Insight CI ‚Äî GitHub Actions Workflow
#
# Validates the demo with lint, type checks, unit tests and Docker build.
# Runs only via manual dispatch.
# Tagged releases deploy a Docker image with rollback on failure.
name: "üöÄ CI"

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks:  write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_IMAGE: agi-insight-demo

jobs:
  owner-check:
    name: "Verify owner"
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [ "${{ github.actor }}" != "${{ github.repository_owner }}" ]; then
            echo "This workflow may only be run by the repository owner."
            exit 1
          fi

  lint-type:
    needs: owner-check
    name: "üßπ Ruff + üè∑Ô∏è Mypy"
    runs-on: ubuntu-latest
    environment: ci-on-demand        # ‚á¶ optional: add reviewers in repo Settings ‚Üí Environments
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: .cache/pre-commit
          key: ${{ runner.os }}-precommit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-precommit-
      - name: Install lint tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
      - name: Install pre-commit
        run: pip install pre-commit==4.2.0
        env:
          PRE_COMMIT_HOME: .cache/pre-commit
      - name: Run pre-commit checks
        run: pre-commit run --all-files
        env:
          PRE_COMMIT_HOME: .cache/pre-commit
      - name: Ruff lint
        run: ruff check alpha_factory_v1/demos/alpha_agi_insight_v1
      - name: Mypy type-check
        # Use configuration defaults to restrict analysis to the src package
        run: mypy --config-file mypy.ini

  tests:
    needs: owner-check
    name: "‚úÖ Pytest"
    runs-on: ubuntu-latest
    environment: ci-on-demand
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.lock
          pip install -r requirements-dev.txt
          pip install -r requirements-demo.txt
          pip install pytest pytest-cov pytest-benchmark mutmut
      - name: Verify environment
        run: |
          python scripts/check_python_deps.py
          python check_env.py --auto-install --demo macro_sentinel
      - name: Build sandbox image
        run: docker build -t selfheal-sandbox:latest -f sandbox.Dockerfile .
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: Install insight browser dependencies
        run: npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
      - name: Audit insight browser dependencies
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 audit --production --audit-level=high
      - name: Run insight browser tests
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 test
      - name: Install web dependencies
        run: npm ci --prefix alpha_factory_v1/core/interface/web_client
      - name: Audit web dependencies
        run: npm --prefix alpha_factory_v1/core/interface/web_client audit --production --audit-level=high
      - name: Type check insight browser
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run typecheck
      - name: Cypress E2E tests with Percy
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
          PERCY_TOKEN_E2E: ${{ secrets.PERCY_TOKEN }}
        run: npm --prefix alpha_factory_v1/core/interface/web_client run percy:cypress
      - name: Install Playwright browsers
        id: install-browsers
        run: |
          set +e
          if ! playwright install chromium webkit; then
            echo "SKIP_WEBKIT_TESTS=1" >> "$GITHUB_ENV"
          fi
          set -e
      - name: Install proto compiler
        run: pip install grpcio-tools
      - name: Verify protobuf
        run: make proto-verify
      - name: Run tests with coverage
        run: |
          python check_env.py --auto-install${WHEELHOUSE:+ --wheelhouse "$WHEELHOUSE"}
          pytest --cov --cov-report=xml --cov-fail-under=70
      - name: Mutation tests
        run: |
          mutmut run --paths-to-mutate alpha_factory_v1/demos/alpha_agi_insight_v1/src --runner "pytest -q"
      - name: Run benchmark
        run: |
          pytest tests/test_benchmark.py -q
          cat tests/benchmarks/latest.json
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: tests/benchmarks/latest.json
      - name: Generate benchmark comment
        run: |
          python - <<'PY'
          import json
          data=json.load(open('tests/benchmarks/latest.json'))
          with open('bench.txt','w') as f:
              f.write(f"p95 runtime: {data['p95']:.4f}s\n")
              f.write(f"tokens used: {data['tokens']}\n")
          PY
      - name: Comment benchmark
        if: ${{ github.event.pull_request }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: benchmark
          path: bench.txt
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  windows-smoke:
    name: "Windows Smoke"
    needs: owner-check
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: pip
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.lock
          pip install -r requirements-dev.txt
          pip install pytest
      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: windows-npm-${{ hashFiles('alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/package-lock.json') }}
          restore-keys: |
            windows-npm-
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Verify environment
        run: |
          python scripts/check_python_deps.py
          python check_env.py --auto-install
      - name: Build web assets
        env:
          PYODIDE_BASE_URL: https://cdn.jsdelivr.net/pyodide/v0.28.0/full
          HF_GPT2_BASE_URL: https://huggingface.co/openai-community/gpt2/resolve/main
        run: |
          npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
          npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 fetch-assets
          npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 build
      - name: Run smoke tests
        run: pytest -m smoke -q

  docs-check:
    name: "üìú MkDocs"
    needs: owner-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip
      - name: Install docs requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-docs.txt
      - name: Build documentation
        run: mkdocs build --strict

  docs-build:
    name: "üìö Docs Build"
    needs: [owner-check, tests]
    runs-on: ubuntu-latest
    env:
      PYODIDE_BASE_URL: https://cdn.jsdelivr.net/pyodide/v0.28.0/full
      HF_GPT2_BASE_URL: https://huggingface.co/openai-community/gpt2/resolve/main
      FETCH_ASSETS_ATTEMPTS: '5'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: pip
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: |
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/package-lock.json
            alpha_factory_v1/core/interface/web_client/package-lock.json
      - name: Install base dependencies
        run: python check_env.py --auto-install
      - name: Install docs requirements
        run: pip install -r requirements-docs.txt
      - name: Install insight browser dependencies
        run: npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
      - name: Install web client dependencies
        run: npm ci --prefix alpha_factory_v1/core/interface/web_client
      - name: Build gallery site
        run: ./scripts/build_gallery_site.sh
      - name: Verify downloaded assets
        run: python scripts/fetch_assets.py --verify-only
      - name: Install Playwright browsers
        run: |
          set +e
          if ! playwright install chromium webkit; then
            echo "SKIP_WEBKIT_TESTS=1" >> "$GITHUB_ENV"
          fi
          set -e
      - name: Verify demo pages
        run: python scripts/verify_demo_pages.py
      - name: Verify Insight PWA offline
        run: |
          python -m http.server --directory site 8000 &
          SERVER_PID=$!
          sleep 2
          python scripts/verify_insight_offline.py
          kill "$SERVER_PID"

  docker:
    name: "üê≥ Docker build"
    needs: [owner-check, tests]
    runs-on: ubuntu-latest
    environment: ci-on-demand
    steps:
      - uses: actions/checkout@v4
      - name: Compute repo_owner_lower
        run: echo "repo_owner_lower=$(echo \"${{ github.repository_owner }}\" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Install insight browser dependencies
        run: npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
      - name: Audit insight browser dependencies
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 audit --production --audit-level=high
      - name: Run insight browser tests
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 test
      - name: Type check insight browser
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run typecheck
      - name: Build web client
        run: |
          make build_web
          test -f alpha_factory_v1/core/interface/web_client/dist/index.html
      - name: Accessibility audit
        run: |
          npx --yes @axe-core/cli alpha_factory_v1/core/interface/web_client/dist/index.html --score > axe.json
          score=$(jq '.score' axe.json)
          echo "a11y score: $score"
          if [ "$score" -lt 90 ]; then
            cat axe.json
            exit 1
          fi
      - name: Build image
        run: |
          docker build -t "$DOCKER_IMAGE:ci" \
            alpha_factory_v1/demos/alpha_agi_insight_v1/infrastructure
      - name: Smoke test image
        run: |
          docker run --rm -e RUN_MODE=cli "$DOCKER_IMAGE:ci" simulate --horizon 1 --offline

  deploy:
    if: github.actor == github.repository_owner && startsWith(github.ref, 'refs/tags/')
    name: "üì¶ Deploy"
    needs: [owner-check, docker]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Compute repo_owner_lower
        run: echo "repo_owner_lower=$(echo \"${{ github.repository_owner }}\" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull previous image
        run: docker pull "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest" || true
      - name: Tag previous
        run: docker tag "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest" "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:previous" || true
      - name: Push previous tag
        run: docker push "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:previous" || true
      - name: Push new image
        run: |
          docker tag "$DOCKER_IMAGE:ci" "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.ref_name }}"
          docker tag "$DOCKER_IMAGE:ci" "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
          docker push "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.ref_name }}"
          docker push "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      - name: Install insight browser dependencies
        run: npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
      - name: Type check insight browser
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run typecheck
      - name: Build web client
        run: make build_web
      - name: Pack release assets
        run: tar -czf web-client.tar.gz -C alpha_factory_v1/core/interface/web_client/dist .
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: web-client.tar.gz
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back to previous image"
          docker pull "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:previous"
          docker tag "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:previous" "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
          docker push "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
          echo "Rollback succeeded"
