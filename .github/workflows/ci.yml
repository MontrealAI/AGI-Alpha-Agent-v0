# 🌐 Alpha-AGI Insight CI — GitHub Actions Workflow
#
# Validates the demo with lint, type checks, unit tests and Docker build.
# Runs only via manual dispatch by the repository owner.
# Tagged releases deploy a Docker image with rollback on failure.
name: "🚀 CI"

on:
  workflow_dispatch:
    inputs:
      a11y-threshold:
        description: "Minimum Axe accessibility score"
        required: false
        default: "90"

permissions:
  contents: read
  actions: read
  checks:  write
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_IMAGE: agi-insight-demo
  NODE_LOCKFILES: |
    alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/package-lock.json
    alpha_factory_v1/core/interface/web_client/package-lock.json
    alpha_factory_v1/core/interface/web_client/staking/package-lock.json
    alpha_factory_v1/demos/alpha_agi_insight_v1/src/interface/web_client/package-lock.json
  PYODIDE_BASE_URL: https://cdn.jsdelivr.net/pyodide/v0.28.0/full
  HF_GPT2_BASE_URL: https://huggingface.co/openai-community/gpt2/resolve/main
  A11Y_THRESHOLD: ${{ inputs.a11y-threshold }}

jobs:

  owner-check:
    name: "Verify owner"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2 # 11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: ./.github/actions/ensure-owner

  lint-type:
    name: "🧹 Ruff + 🏷️ Mypy"
    needs: owner-check
    runs-on: ubuntu-latest
    environment: ci-on-demand        # ⇦ optional: add reviewers in repo Settings → Environments
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    steps:
      # checkout required for local composite actions
      - uses: actions/checkout@v4.2.2 # 11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: actions/setup-python@v5.6.0 # a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: 'requirements.lock'

      - uses: actions/setup-node@v4.4.0 # 49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_LOCKFILES }}

      - name: Cache pre-commit
        uses: actions/cache@v4.2.3 # 5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: .cache/pre-commit
          key: ${{ runner.os }}-precommit-py${{ matrix.python-version }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-precommit-py${{ matrix.python-version }}-
      - name: Install lint tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy
      - name: Install pre-commit
        run: pip install pre-commit==4.2.0
        env:
          PRE_COMMIT_HOME: .cache/pre-commit
      - name: Clean insight browser node_modules
        run: |
          rm -rf alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/node_modules
          npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
      - name: Run pre-commit checks
        run: pre-commit run --all-files
        env:
          PRE_COMMIT_HOME: .cache/pre-commit
      - name: Fail on uncommitted changes
        run: |
          git --no-pager diff
          if ! git diff --quiet; then
            echo "::error::Uncommitted changes detected. Run pre-commit locally."
            exit 1
          fi
      - name: Ruff lint
        run: ruff check alpha_factory_v1/demos/alpha_agi_insight_v1
      - name: Mypy type-check
        # Use configuration defaults to restrict analysis to the src package
        run: mypy --config-file mypy.ini

  tests:
    name: "✅ Pytest"
    needs: owner-check
    runs-on: ubuntu-latest
    environment: ci-on-demand
    env:
      SANDBOX_IMAGE: selfheal-sandbox:latest
      PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4.2.2 # 11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: actions/setup-python@v5.6.0 # a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: 'requirements.lock'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.lock -r requirements-dev.lock -r requirements-demo.lock
      - name: Verify environment
        run: |
          python scripts/check_python_deps.py
          python check_env.py --auto-install --demo macro_sentinel
      - name: Build sandbox image
        run: docker build -t "$SANDBOX_IMAGE" -f sandbox.Dockerfile .
      # Install Node.js and cache dependencies using both lockfiles
      - uses: actions/setup-node@v4.4.0 # 49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_LOCKFILES }}
      - id: asset-key-docs-build
        uses: ./.github/actions/generate-asset-key
      - name: Restore Insight asset cache
        uses: actions/cache@v4.2.3 # 5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm_llm
          key: assets-${{ steps.asset-key-docs-build.outputs.key }}-${{ runner.os }}-py${{ matrix.python-version }}
          restore-keys: |
            assets-${{ runner.os }}-py${{ matrix.python-version }}-
      - id: asset-key-docker
        uses: ./.github/actions/generate-asset-key
      - name: Restore Insight asset cache
        uses: actions/cache@v4.2.3 # 5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm_llm
          key: assets-${{ steps.asset-key-docker.outputs.key }}-${{ runner.os }}-py${{ matrix.python-version }}
          restore-keys: |
            assets-${{ runner.os }}-py${{ matrix.python-version }}-
      - name: Fetch insight browser assets
        run: |
          set -e
          npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets
          )
      - name: Install insight browser dependencies
        run: npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
      - name: Verify insight assets
        run: |
          python scripts/fetch_assets.py --verify-only || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets &&
            python scripts/fetch_assets.py --verify-only
          )
      - name: Update browserslist database (Insight demo)
        working-directory: alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
        run: npx update-browserslist-db --update-db --yes
      - name: Audit insight browser dependencies
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 audit --production --audit-level=high
      - name: Install Playwright browsers
        run: python -m playwright install chromium webkit firefox || echo "SKIP_WEBKIT_TESTS=1" >> "$GITHUB_ENV"
      - name: Run insight browser tests
        env:
          CI: 'true'
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 test
      - name: Install web dependencies
        run: npm ci --prefix alpha_factory_v1/core/interface/web_client
      - name: Update browserslist database (Web client)
        working-directory: alpha_factory_v1/core/interface/web_client
        run: npx update-browserslist-db --update-db --yes
      - name: Audit web dependencies
        run: npm --prefix alpha_factory_v1/core/interface/web_client audit --production --audit-level=high
      - name: Type check insight browser
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run typecheck
      - name: Install proto compiler
        run: pip install grpcio-tools
      - name: Verify protobuf
        run: make proto-verify
      - name: Run tests with coverage
        run: |
          python check_env.py --auto-install${WHEELHOUSE:+ --wheelhouse "$WHEELHOUSE"}
          pytest --cov --cov-report=xml --cov-fail-under=80
      - name: Mutation tests
        run: |
          mutmut run --paths-to-mutate alpha_factory_v1/demos/alpha_agi_insight_v1/src --runner "pytest -q"
      - name: Run benchmark
        run: |
          pytest tests/test_benchmark.py -q
          cat tests/benchmarks/latest.json
      - name: Check benchmark result
        id: bench-check
        run: |
          if [[ -f tests/benchmarks/latest.json ]]; then echo "found=true" >> "$GITHUB_OUTPUT"; fi
      - name: Upload benchmark results
        if: steps.bench-check.outputs.found == 'true'
        uses: actions/upload-artifact@v4.6.2 # ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: benchmark-results
          path: tests/benchmarks/latest.json
      - name: Generate benchmark comment
        run: |
          python - <<'PY'
          import json
          data=json.load(open('tests/benchmarks/latest.json'))
          with open('bench.txt','w') as f:
              f.write(f"p95 runtime: {data['p95']:.4f}s\n")
              f.write(f"tokens used: {data['tokens']}\n")
          PY
      - name: Comment benchmark
        if: ${{ github.event.pull_request }}
        uses: marocchino/sticky-pull-request-comment@v2.9.4 # 773744901bac0e8cbb5a0dc842800d45e9b2b405
        with:
          header: benchmark
          path: bench.txt
      - name: Check coverage report
        id: coverage-check
        run: |
          if [[ -f coverage.xml ]]; then echo "found=true" >> "$GITHUB_OUTPUT"; fi
      - name: Upload coverage
        if: steps.coverage-check.outputs.found == 'true'
        uses: actions/upload-artifact@v4.6.2 # ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: coverage-xml
          path: coverage.xml

  windows-smoke:
    name: "Windows Smoke"
    needs: [tests]
    runs-on: windows-latest
    environment: ci-on-demand
    steps:
      - uses: actions/checkout@v4.2.2 # 11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: actions/setup-python@v5.6.0 # a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: 'requirements.lock'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-cpu.lock -r requirements-demo-cpu.lock
      - name: Install torch CPU wheel
        run: pip install torch==2.7.1
      - uses: actions/setup-node@v4.4.0 # 49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_LOCKFILES }}
      - name: Verify environment
        run: |
          python scripts/check_python_deps.py
          python check_env.py --auto-install
      - id: asset-key-docker
        uses: ./.github/actions/generate-asset-key
      - name: Cache Insight assets
        uses: actions/cache@v4.2.3 # 5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm_llm
          key: assets-${{ steps.asset-key-docker.outputs.key }}-${{ runner.os }}
          restore-keys: assets-${{ runner.os }}-
      - name: Build web assets
        shell: bash
        run: |
          set -e
          npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
          (cd alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 && \
            npx update-browserslist-db --update-db --yes)
          npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 fetch-assets || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 fetch-assets
          )
          python scripts/fetch_assets.py --verify-only || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 fetch-assets &&
            python scripts/fetch_assets.py --verify-only
          )
          npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 build
      - name: Run smoke tests
        run: pytest -m smoke -q

  macos-smoke:
    name: "macOS Smoke"
    needs: [tests]
    environment: ci-on-demand
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4.2.2 # 11bd71901bbe5b1630ceea73d27597364c9af683
      - uses: actions/setup-python@v5.6.0 # a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.11'
          cache: pip
          cache-dependency-path: 'requirements.lock'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-cpu.lock -r requirements-demo-cpu.lock
      - name: Install torch CPU wheel
        run: pip install torch==2.7.1
      - name: Install macOS extras
        run: pip install appnope==0.1.4
      - uses: actions/setup-node@v4.4.0 # 49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_LOCKFILES }}
      - name: Verify environment
        run: |
          python scripts/check_python_deps.py
          python check_env.py --auto-install
      - id: asset-key-docker
        uses: ./.github/actions/generate-asset-key
      - name: Cache Insight assets
        uses: actions/cache@v4.2.3 # 5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm_llm
          key: assets-${{ steps.asset-key-docker.outputs.key }}-${{ runner.os }}
          restore-keys: assets-${{ runner.os }}-
      - name: Build web assets
        shell: bash
        run: |
          set -e
          npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
          (cd alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 && \
            npx update-browserslist-db --update-db --yes)
          npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 fetch-assets || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 fetch-assets
          )
          python scripts/fetch_assets.py --verify-only || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 fetch-assets &&
            python scripts/fetch_assets.py --verify-only
          )
          npm run --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 build
      - name: Run smoke tests
        run: pytest -m smoke -q

  docs-check:
    name: "📜 MkDocs"
    needs: [tests]
    runs-on: ubuntu-latest
    env:
      SANDBOX_IMAGE: selfheal-sandbox:latest
    environment: ci-on-demand
    steps:
      - uses: actions/checkout@v4.2.2 # 11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Build sandbox image
        run: docker build -t "$SANDBOX_IMAGE" -f sandbox.Dockerfile .
      - uses: actions/setup-python@v5.6.0 # a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.12'
          cache: pip
          cache-dependency-path: 'requirements.lock'
      - name: Install docs requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-docs.lock
      - name: Install base dependencies
        run: python check_env.py --auto-install
      - id: asset-key-docs-build
        uses: ./.github/actions/generate-asset-key
      - name: Restore Insight asset cache
        uses: actions/cache@v4.2.3 # 5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm_llm
          key: assets-${{ steps.asset-key-docs-build.outputs.key }}-${{ runner.os }}
          restore-keys: assets-${{ runner.os }}-
      - uses: actions/setup-node@v4.4.0 # 49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_LOCKFILES }}
      - name: Install Playwright browsers
        run: python -m playwright install chromium webkit firefox
      - name: Fetch insight browser assets
        run: |
          set -e
          npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets
          )
      - name: Verify downloaded assets
        run: |
          python scripts/fetch_assets.py --verify-only || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets &&
            python scripts/fetch_assets.py --verify-only
          )
      - name: Install Playwright browsers
        run: python -m playwright install chromium webkit firefox || echo "SKIP_WEBKIT_TESTS=1" >> "$GITHUB_ENV"
      - name: Install pre-commit
        run: pip install pre-commit==4.2.0
      - name: Build documentation
        run: mkdocs build --strict

  docs-build:
    name: "📚 Docs Build"
    needs: [tests]
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    environment: ci-on-demand
    env:
      FETCH_ASSETS_ATTEMPTS: '5'
      SANDBOX_IMAGE: selfheal-sandbox:latest
    steps:
      - uses: actions/checkout@v4.2.2 # 11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Build sandbox image
        run: docker build -t "$SANDBOX_IMAGE" -f sandbox.Dockerfile .
      - uses: actions/setup-python@v5.6.0 # a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.12'
          cache: pip
          cache-dependency-path: 'requirements.lock'
      - uses: actions/setup-node@v4.4.0 # 49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_LOCKFILES }}
      - name: Install base dependencies
        run: python check_env.py --auto-install
      - name: Install docs requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-docs.lock
      - name: Install Playwright browsers
        run: python -m playwright install chromium webkit firefox
      - name: Install insight browser dependencies
        run: npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
      - name: Install web client dependencies
        run: npm ci --prefix alpha_factory_v1/core/interface/web_client
      - name: Build web client
        run: make build_web
      - name: Update browserslist database (Insight demo)
        working-directory: alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
        run: npx update-browserslist-db --update-db --yes
      - name: Update browserslist database (Web client)
        working-directory: alpha_factory_v1/core/interface/web_client
        run: npx update-browserslist-db --update-db --yes
      - name: Install pre-commit
        run: pip install pre-commit==4.2.0
      - name: Build gallery site
        run: ./scripts/build_gallery_site.sh
      - name: Verify downloaded assets
        run: |
          python scripts/fetch_assets.py --verify-only || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets &&
            python scripts/fetch_assets.py --verify-only
          )
      - name: Detect Pyodide changes
        id: pyodide-diff-docs
        run: |
          if git diff --quiet; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Install Playwright browsers
        run: python -m playwright install chromium webkit firefox || echo "SKIP_WEBKIT_TESTS=1" >> "$GITHUB_ENV"
      - name: Verify demo pages
        run: python scripts/verify_demo_pages.py
      - name: Verify Insight PWA offline
        run: |
          python -m http.server --directory site 8000 &
          SERVER_PID=$!
          sleep 2
          python scripts/verify_insight_offline.py
          kill "$SERVER_PID"

  docker:
    name: "🐳 Docker build"
    needs: [tests]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    # This job builds and pushes the image.
    environment: ci-on-demand
    steps:
      - uses: actions/checkout@v4.2.2 # 11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Compute repo_owner_lower
        run: echo "repo_owner_lower=$(echo \"${{ github.repository_owner }}\" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
      - uses: actions/setup-node@v4.4.0 # 49933ea5288caeca8642d1e84afbd3f7d6820020
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_LOCKFILES }}
      - name: Install insight browser dependencies
        run: npm ci --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
      - name: Update browserslist database (Insight demo)
        working-directory: alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1
        run: npx update-browserslist-db --update-db --yes
      - name: Install web client dependencies
        run: npm ci --prefix alpha_factory_v1/core/interface/web_client
      - name: Update browserslist database (Web client)
        working-directory: alpha_factory_v1/core/interface/web_client
        run: npx update-browserslist-db --update-db --yes
      - id: asset-key-docker
        uses: ./.github/actions/generate-asset-key
      - name: Cache Insight assets
        uses: actions/cache@v4.2.3 # 5a3ec84eff668545956fd18022155c47e93e2684
        with:
          path: |
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm
            alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1/wasm_llm
          key: assets-${{ steps.asset-key-docker.outputs.key }}-${{ runner.os }}
          restore-keys: assets-${{ runner.os }}-
      - name: Fetch insight browser assets
        run: |
          set -e
          npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets
          )
      - name: Verify insight assets
        run: |
          python scripts/fetch_assets.py --verify-only || (
            echo "Detected asset hash change, updating..." &&
            python scripts/update_pyodide.py 0.28.0 &&
            npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run fetch-assets &&
            python scripts/fetch_assets.py --verify-only
          )
      - name: Audit insight browser dependencies
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 audit --production --audit-level=high
      - name: Install Playwright browsers
        run: python -m playwright install chromium webkit firefox || echo "SKIP_WEBKIT_TESTS=1" >> "$GITHUB_ENV"
      - name: Run insight browser tests
        env:
          CI: 'true'
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 test
      - name: Type check insight browser
        run: npm --prefix alpha_factory_v1/demos/alpha_agi_insight_v1/insight_browser_v1 run typecheck
      - name: Build web client
        run: |
          make build_web
          test -f alpha_factory_v1/core/interface/web_client/dist/index.html
      - name: Archive web client dist
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          tar -czf web-client.tar.gz -C alpha_factory_v1/core/interface/web_client/dist .
          sha256sum web-client.tar.gz > web-client.sha256
      - name: Install cosign
        if: startsWith(github.ref, 'refs/tags/')
        uses: sigstore/cosign-installer@v3.9.2 # d58896d6a1865668819e1d91763c7751a165e159
        with:
          cosign-release: 'v2.2.4'
      - name: Sign web client artifact
        if: startsWith(github.ref, 'refs/tags/')
        run: cosign sign-blob --yes --output-signature web-client.tar.gz.sig web-client.tar.gz
      - name: Verify web client signature
        if: startsWith(github.ref, 'refs/tags/')
        run: cosign verify-blob --signature web-client.tar.gz.sig web-client.tar.gz
      - name: Check web client artifact
        if: startsWith(github.ref, 'refs/tags/')
        id: web-client-check
        run: |
          if [[ -f web-client.tar.gz ]]; then echo "found=true" >> "$GITHUB_OUTPUT"; fi
      - uses: actions/upload-artifact@v4.6.2 # ea165f8d65b6e75b540449e92b4886f43607fa02
        if: startsWith(github.ref, 'refs/tags/') && steps.web-client-check.outputs.found == 'true'
        with:
          name: web-client
          path: |
            web-client.tar.gz
            web-client.sha256
            web-client.tar.gz.sig
      - name: Accessibility audit
        run: |
          npx --yes @axe-core/cli "file://${{ github.workspace }}/alpha_factory_v1/core/interface/web_client/dist/index.html" --stdout > axe.json
          score=$(python scripts/axe_score.py axe.json)
          echo "a11y score: $score (threshold $A11Y_THRESHOLD)"
          if [ "$score" -lt "$A11Y_THRESHOLD" ]; then
            cat axe.json
            exit 1
          fi
      - name: Build image
        run: |
          docker build -t "$DOCKER_IMAGE:ci" \
            -f infrastructure/Dockerfile \
            .
      - name: Smoke test image
        run: |
          docker run --rm -e RUN_MODE=cli "$DOCKER_IMAGE:ci" simulate --horizon 1 --offline
      - name: Compute repo_owner_lower
        run: echo "repo_owner_lower=$(echo \"${{ github.repository_owner }}\" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
      - name: Login to GHCR
        uses: docker/login-action@v3.4.0 # 74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push image
        run: |
          docker tag "$DOCKER_IMAGE:ci" "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.sha }}"
          docker push "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.sha }}"
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.9.2 # d58896d6a1865668819e1d91763c7751a165e159
        with:
          cosign-release: 'v2.2.4'
      - name: Sign image
        run: cosign sign --yes "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.sha }}"
      - name: Verify image signature
        run: cosign verify "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.sha }}"

  deploy:
    name: "📦 Deploy"
    if: startsWith(github.ref, 'refs/tags/')
    needs: [docker]
    runs-on: ubuntu-latest
    environment: ci-on-demand
    steps:
      - uses: actions/checkout@v4.2.2 # 11bd71901bbe5b1630ceea73d27597364c9af683
      - name: Compute repo_owner_lower
        run: echo "repo_owner_lower=$(echo \"${{ github.repository_owner }}\" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"
      - name: Login to GHCR
        uses: docker/login-action@v3.4.0 # 74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.9.2 # d58896d6a1865668819e1d91763c7751a165e159
        with:
          cosign-release: 'v2.2.4'
      - name: Pull previous image
        run: docker pull "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest" || true
      - name: Tag previous
        run: docker tag "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest" "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:previous" || true
      - name: Push previous tag
        run: docker push "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:previous" || true
      - name: Push new image
        run: |
          docker tag "$DOCKER_IMAGE:ci" "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.ref_name }}"
          docker tag "$DOCKER_IMAGE:ci" "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
          docker push "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.ref_name }}"
          docker push "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
      - name: Sign release images
        run: |
          cosign sign --yes "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.ref_name }}"
          cosign sign --yes "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
      - name: Verify release signatures
        run: |
          cosign verify "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:${{ github.ref_name }}"
          cosign verify "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
      - uses: actions/download-artifact@v4.3.0 # d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: web-client
      - name: Verify web client artifact
        run: sha256sum -c web-client.sha256
      - name: Verify web client signature
        run: cosign verify-blob --signature web-client.tar.gz.sig web-client.tar.gz
      - name: Prepare release assets
        run: echo "Using prebuilt web client artifact"
      - name: Upload release assets
        uses: softprops/action-gh-release@v2.3.2 # 72f2c25fcb47643c292f7107632f7a47c1df5cd8
        with:
          files: web-client.tar.gz
      - name: Rollback on failure
        if: failure()
        run: |
          echo "Rolling back to previous image"
          docker pull "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:previous"
          docker tag "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:previous" "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
          docker push "ghcr.io/$repo_owner_lower/$DOCKER_IMAGE:latest"
          echo "Rollback succeeded"
