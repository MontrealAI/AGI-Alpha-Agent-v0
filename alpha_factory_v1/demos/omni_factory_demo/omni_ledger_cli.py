#!/usr/bin/env python3
# SPDX-License-Identifier: Apache-2.0
"""
omni_ledger_cli.py
──────────────────
Simple command-line interface for inspecting the SQLite ledger generated by the
OMNI-Factory Smart-City demo.  Works entirely offline and requires nothing but
Python 3.9+.

Usage
─────
    # List the 10 most recent tasks
    python omni_ledger_cli.py list --tail 10

    # Show aggregate statistics (total tokens, avg reward, etc.)
    python omni_ledger_cli.py stats

    # Export the full ledger to CSV for Excel / Google Sheets
    python omni_ledger_cli.py export --outfile citycoin_ledger.csv
"""
from __future__ import annotations

import argparse
import csv
import itertools
import sqlite3
import sys
import time
from pathlib import Path
from typing import Iterable, List, Tuple

# Keep in sync with omni_factory_demo.py
DEFAULT_LEDGER = Path("./omni_ledger.sqlite")

# ──────────────────────────────────────────────────────────────────────────────
# Helper functions
# ──────────────────────────────────────────────────────────────────────────────
def _rows(conn: sqlite3.Connection) -> Iterable[Tuple[float, str, int, float]]:
    """Stream all ledger rows (ts, scenario, tokens, avg_reward)."""
    cur = conn.execute("SELECT ts, scenario, tokens, avg_reward FROM ledger "
                       "ORDER BY ts ASC")
    yield from cur


def _human_ts(ts: float) -> str:
    return time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(ts))


def _print_table(rows: Iterable[Tuple], headers: List[str]) -> None:
    cols = list(zip(*([headers] + list(rows))))
    widths = [max(len(str(x)) for x in col) for col in cols]
    fmt = "  ".join(f"{{:<{w}}}" for w in widths)
    print(fmt.format(*headers))
    print("-" * (sum(widths) + 2 * (len(widths) - 1)))
    for row in rows:
        print(fmt.format(*row))


# ──────────────────────────────────────────────────────────────────────────────
# Sub-commands
# ──────────────────────────────────────────────────────────────────────────────
def cmd_list(args: argparse.Namespace) -> None:          # noqa: D401
    """Show recent ledger entries."""
    conn = sqlite3.connect(args.ledger)
    rows = list(_rows(conn))
    conn.close()
    if args.tail:
        rows = rows[-args.tail:]
    printable = [
        (_human_ts(ts), scenario[:60], tokens, f"{avg_reward:.3f}")
        for ts, scenario, tokens, avg_reward in rows
    ]
    _print_table(printable, ["Timestamp", "Scenario", "Tokens", "AvgReward"])


def cmd_stats(args: argparse.Namespace) -> None:         # noqa: D401
    """Show aggregate statistics over the whole ledger."""
    conn = sqlite3.connect(args.ledger)
    data = list(_rows(conn))
    conn.close()
    if not data:
        print("Ledger is empty.")
        return
    total_tokens   = sum(r[2] for r in data)
    mean_reward    = sum(r[3] for r in data) / len(data)
    first_ts, last_ts = data[0][0], data[-1][0]
    duration_days  = (last_ts - first_ts) / 86400 or 1
    tokens_per_day = total_tokens / duration_days

    print(f"Entries           : {len(data):,}")
    print(f"Total CityCoins   : {total_tokens:,}")
    print(f"Average Reward    : {mean_reward:.3f}")
    print(f"Period covered    : {time.ctime(first_ts)}  →  {time.ctime(last_ts)}")
    print(f"CityCoins / day   : {tokens_per_day:,.1f}")


def cmd_export(args: argparse.Namespace) -> None:        # noqa: D401
    """Dump the full ledger to CSV for external analysis."""
    conn = sqlite3.connect(args.ledger)
    rows = list(_rows(conn))
    conn.close()
    out = Path(args.outfile).expanduser()
    with out.open("w", newline="", encoding="utf-8") as fh:
        writer = csv.writer(fh)
        writer.writerow(["timestamp", "scenario", "tokens", "avg_reward"])
        writer.writerows(rows)
    print(f"Wrote {len(rows)} rows → {out}")


# ──────────────────────────────────────────────────────────────────────────────
# CLI plumbing
# ──────────────────────────────────────────────────────────────────────────────
def _build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(
        description="Inspect / export the OMNI-Factory CityCoin ledger."
    )
    p.add_argument(
        "--ledger", type=Path, default=DEFAULT_LEDGER,
        help=f"Path to ledger file (default: {DEFAULT_LEDGER})"
    )
    sub = p.add_subparsers(dest="cmd", required=True)

    # list
    pl = sub.add_parser("list", help="List recent ledger entries")
    pl.add_argument("--tail", type=int, default=20,
                    help="Show only the last N entries (default 20)")
    pl.set_defaults(func=cmd_list)

    # stats
    ps = sub.add_parser("stats", help="Show aggregate statistics")
    ps.set_defaults(func=cmd_stats)

    # export
    pe = sub.add_parser("export", help="Export ledger to CSV")
    pe.add_argument("--outfile", type=Path, required=True,
                    help="Destination CSV file")
    pe.set_defaults(func=cmd_export)

    return p


def main(argv: List[str] | None = None) -> None:
    args = _build_parser().parse_args(argv)
    args.func(args)      # type: ignore[arg-type]


if __name__ == "__main__":                                # pragma: no cover
    main(sys.argv[1:])
