# .github/workflows/container-publish.yml
name: Publish container images (CPU + CUDA)

on:
  push:
    branches: [ "main" ]
    tags:     [ "v*.*.*" ]      # push on release tags too
  workflow_dispatch:

permissions:
  packages: write               #  → ghcr.io
  id-token: write               #  → keyless Cosign signing
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/alpha-factory

jobs:
  build-and-push:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        flavour:
          - name: cpu-slim
            tag: cpu-slim
            build-arg: BASE_IMAGE=python:3.11-slim-bookworm
          - name: cuda
            tag: cuda
            build-arg: BASE_IMAGE=nvidia/cuda:12.4.0-runtime-ubuntu22.04
    steps:
      # ---------------------------------------------------------------
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up QEMU (multi‑arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---------------------------------------------------------------
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ---------------------------------------------------------------
      - name: Build & push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.flavour.tag }}-${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.flavour.tag }}${{ github.ref_name == 'main' && '-latest' || '' }}
          build-args: |
            ${{ matrix.flavour.build-arg }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          sbom: true                 # BuildKit generates SPDX

      # ---------------------------------------------------------------
      - name: Extract SBOM artifact
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.flavour.tag }}-${{ github.sha }}
          artifact-name: sbom-${{ matrix.flavour.tag }}.spdx.json

      # ---------------------------------------------------------------
      - name: Sign container image (keyless, OIDC)
        uses: sigstore/cosign-installer@v3
      - run: |
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

